# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-tasks.json
- name: "set vars"
  set_fact:
    local_src_dir: "{{ artifact_dir_src_local }}/{{ build_version.version }}"
    local_bin_dir: "{{ artifact_dir_bin_local }}/{{ build_version.version }}"

    remote_src_dir: "{{ artifact_dir_src_remote }}/{{ build_version.version }}"
    remote_bin_dir: "{{ artifact_dir_bin_remote }}/{{ build_version.version }}"

    archive_src: "{{ build_version.version }}.tar.gz"
    archive_bin: "{{ build_version.version }}-bootstrap.tar.gz"

    docker_container_name: "{{ build_version.version }}"
    docker_image_name: "go"
    docker_image_tag: "{{ build_version.version }}"

- name: extract go version list
  set_fact:
    all_go_versions: "{{ go_versions | map(attribute='version') | list }}"

# поиск и установка переменной указывающей на предыдущую версию go bootstrap
- name: set go bootstrap
  when: all_go_versions.index(build_version.version) > 0
  set_fact:
    go_bootstrap: "{{ all_go_versions[all_go_versions.index(build_version.version) - 1] }}"

# установка переменной для предыдущего go bootstrap
- name: set prev go bootstrap archive name
  when: go_bootstrap is defined
  set_fact:
    go_bootstrap_dir: "{{ artifact_dir_bin_local }}/{{ go_bootstrap }}"
    go_bootstrap_bin: "{{ go_bootstrap }}-bootstrap.tar.gz"


- name: "local src directory remove"
  file:
    path: "{{ local_src_dir }}"
    state: absent

- name: "local src directory create"
  delegate_to: localhost
  file:
    path: "{{ local_src_dir }}"
    state: directory
    mode: '0755'

- name: "local bin directory remove"
  file:
    path: "{{ local_bin_dir }}"
    state: absent

- name: "local bin directory create"
  delegate_to: localhost
  file:
    path: "{{ local_bin_dir }}"
    state: directory
    mode: '0755'

- name: "git clone directory set"
  set_fact:
    go_clone_dir: "{{ local_src_dir }}/src"

- name: "git clone directory create"
  delegate_to: localhost
  file:
      path: "{{ go_clone_dir }}"
      state: absent

- name: git clone
  delegate_to: localhost
  git:
    repo: "{{ go_repo }}"
    dest: "{{ go_clone_dir }}"
    version: "{{ build_version.version }}"
    depth: 1
    force: yes
    recursive: yes

- name: "archive git clone directory"
  delegate_to: localhost
  archive:
    path: "{{ go_clone_dir }}"
    dest: "{{ local_src_dir }}/{{ archive_src }}"
    format: gz

- name: "remote src directory remove"
  file:
    path: "{{ remote_src_dir }}"
    state: absent

- name: "remote src directory create"
  file:
    path: "{{ remote_src_dir }}"
    state: directory
    mode: '0755'

- name: "remote bin directory remove"
  file:
    path: "{{ remote_bin_dir }}"
    state: absent

- name: "remote bin directory create"
  file:
    path: "{{ remote_bin_dir }}"
    state: directory
    mode: '0755'

- name: "copy go to remote"
  copy:
    src: "{{ local_src_dir }}/{{ archive_src }}"
    dest: "{{ remote_src_dir }}/{{ archive_src }}"

- name: "copy go bootstrap to remote"
  when: go_bootstrap is defined
  copy:
    src: "{{ go_bootstrap_dir }}/{{ go_bootstrap_bin }}"
    dest: "{{ remote_src_dir }}/{{ go_bootstrap_bin }}"

- name: "create Dockerfile from template"
  template:
    src: "{{ build_version.dockerfile }}"
    dest: "{{ remote_src_dir }}/Dockerfile"

- name: "build Dockerfile"
  command: >
    docker build
      --file "{{ remote_src_dir }}/Dockerfile"
      --tag {{ docker_image_name }}:{{ docker_image_tag }}
      "{{ remote_src_dir }}"

- name: "remove existing container"
  command: docker rm {{ docker_container_name }}
  ignore_errors: true

- name: "create container"
  command: docker create --name {{ docker_container_name }} {{ docker_image_name }}:{{ docker_image_tag }}

- name: "copy bin from container"
  command: docker cp {{ docker_container_name }}:"/app/bin/{{ archive_bin }}" "{{ remote_bin_dir }}"

- name: "remove existing container"
  command: docker container rm {{ docker_container_name }}

- name: "remove existing image"
  command: docker image rm {{ docker_image_name }}:{{ docker_image_tag }}

- name: "copy archive to local"
  fetch:
    src: "{{ remote_bin_dir }}/{{ archive_bin }}"
    dest: "{{ local_bin_dir }}/{{ archive_bin }}"
    flat: true
